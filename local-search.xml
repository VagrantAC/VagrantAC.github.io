<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/23/browserWorkingPrinciple/"/>
    <url>/2023/11/23/browserWorkingPrinciple/</url>
    
    <content type="html"><![CDATA[<h2 id="浏览器工作原理">浏览器工作原理</h2><h3 id="概念">概念</h3><h4 id="浏览器是多进程模型">浏览器是多进程模型</h4><p>浏览器是多进程架构，包含</p><ul><li>浏览器进程。主要负责界面显示、用户交互、子进程管理</li><li>GPU进程</li><li>网络进程</li><li>Audio Service</li><li>Storage Service</li><li>渲染进程。主要任务是将 HTML、CSS和JavaScript转换为用户与之交互的网页，排版引擎Blink和JavaScript引擎V8都运行在该进程中。默认情况下，Chrome会为每个Tab标签创建一个渲染进程。</li><li>备用渲染进程</li><li>多个插件进程</li><li>多个标签页</li></ul><h4 id="进程模型">进程模型</h4><ol type="1"><li><strong>Process-per-site-instance</strong>：就是你打开一个网站，然后从这个网站链开的一系列网站都属于一个进程。这是Chrome的默认模式。</li><li><strong>Process-per-tab</strong>：这个简单，一个tab一个process，不论各个tab的站点有无联系，就和宣传的那样。用–process-per-tab开启。</li><li><strong>SingleProcess</strong>：这个很熟悉了吧，传统浏览器的模式，没有多进程只有多线程，用–single-process开启。</li></ol><h3 id="导航">导航</h3><h4 id="输入url">输入URL</h4><ol type="1"><li><p>浏览器进程会将URL传给网络进程。</p><ol type="1"><li>通过进程之间的通信IPC来URL请求</li></ol></li><li><p>网络进程发起真正的URL请求。</p><ol type="1"><li><p>网络进程会查找本地缓存，存在直接返回。</p></li><li><p>进行请求。</p><ol type="1"><li>进行DNS解析，获取服务器ip地址，端口</li><li>利用ip地址和服务器建立tcp连接</li><li>构建请求头信息</li><li>发送请求头信息</li><li>服务器响应后，网络进程接收响应头和响应信息，并解析响应内容</li></ol></li><li><p>网络进程解析响应流程</p><ol type="1"><li><p>检查状态码，如果是301/302，则需要重定向，从Location自动中读取地址，重新进行第2步</p><p>（301/302跳转也会读取本地缓存吗？这里有个疑问），如果是200，则继续处理请求。</p></li><li><p>200响应处理：检查响应类型Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行</p></li></ol></li></ol></li><li><p>网络进程接收到了响应头数据，便解析响应头数据，并将数据转发给浏览器进程。</p></li><li><p>浏览器进程接收到网络进程的响应头数据之后，发送“提交导航(CommitNavigation)”消息到渲染进程。</p><p>浏览器会根据响应头数据的Context-type来确定文件类型。html文件会交给浏览器渲染，下载文件会交给浏览器的下载管理器。</p></li><li><p>渲染进程接收到“提交导航”的消息之后，便开始准备接收HTML数据，接收数据的方式是直接和网络进程建立数据管道。</p></li><li><p>最后渲染进程会向浏览器进程“确认提交”，这是告诉浏览器进程：“已经准备好接受和解析页面数据了”。</p></li><li><p>浏览器进程接收到渲染进程“提交文档”的消息之后，便开始移除之前旧的文档，然后更新浏览器进程中的页面状态。</p><p>浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏URL、前进后退的历史状态、更新web页面。</p></li></ol><h3 id="tcp协议">TCP协议</h3><h3 id="响应">响应</h3><h3 id="解析">解析</h3><p>根据响应的数据来构建 dom 和 cssdom</p><h4 id="构建dom树">构建DOM树</h4><figure><imgsrc="https://static001.geekbang.org/resource/image/12/79/125849ec56a3ea98d4b476c66c754f79.png?wh=1142*555"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>通过 JavaScript 修改DOM内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;p&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;black&quot;</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://static001.geekbang.org/resource/image/e7/74/e730aa1d73c1151c588e2f8c7e22c274.png?wh=1142*712"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h4 id="样式计算">样式计算</h4><h3 id="渲染">渲染</h3><h3 id="交互">交互</h3><h3 id="资料">资料</h3><p>https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work</p><p>https://developer.chrome.com/blog/inside-browser-part2/</p><p>http://hassansin.github.io/shared-event-loop-among-same-origin-windows</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>react 笔记</title>
    <link href="/2023/03/12/reactNote/"/>
    <url>/2023/03/12/reactNote/</url>
    
    <content type="html"><![CDATA[<h3 id="jsx">JSX</h3><p>JSX 是一种类 XML 语法的语法糖。<ahref="https://facebook.github.io/jsx/">文档链接</a></p><p>对于 React 而言，渲染的内容是通过<code>React.createElement(component, props, ...children)</code>声明的。而 JSX 是 <code>createElement</code>函数的语法糖。可见的渲染内容是通过编译工具将 JSX 编译为若干由<code>createElement</code> 函数组成的 js 代码。</p><p>例如</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Header</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app-header&quot;</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><p>会编译为</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>    <span class="hljs-string">&quot;header&quot;</span>, <br>    &#123;<span class="hljs-attr">className</span>: <span class="hljs-string">&quot;app-header&quot;</span>&#125;, <br>    <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-literal">null</span>, &#123;title&#125;),<br>    <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>, &#123;rootProps&#125;, ...)<br>);<br></code></pre></td></tr></table></figure><h5 id="组件拆分原则">组件拆分原则</h5><p>单一职责原则 Single Responsibility</p><p>关注点分离原则 Separation of Concern</p><p>一次且仅一次原则 DRY, Don‘t Repeat Yourself</p><p>简约原则 KISS, Keep It Simple &amp; Stupid</p><p>对于拆分组件减少过度设计，减少过多的决策，降低决策疲劳（当连续做决定时，你的决定的效率和效果都会逐渐下降，甚至会做出错误的决定）。</p><h3 id="虚拟dom">虚拟DOM</h3><p>React渲染是通过 React 组件 --&gt; 虚拟DOM --&gt; Web页面真实DOM</p><p>选择虚拟DOM，是通过牺牲性能与对原理的了解，通过减少对真实DOM的操作来减少代码Bug，可以将更多的时间投放在创造性的工作上。</p><h5 id="协调">协调</h5><p>虚拟DOM会将React组件渲染成一棵元素树。当props、state、context等发生变化时，React框架会和之前做Diff对比，将元素的变动最终体现在浏览器页面的DOM中。</p><h5 id="diff-算法">Diff 算法</h5><ol type="1"><li>本身是一棵树的结构，通过递归来处理根/子元素。对于父节点而言，更新子节点，优先通过key来进行匹配；其次是剩余的逐步遍历。</li><li>对比不同的元素，并清调旧的元素和它的子树，建立新的树<ol type="1"><li>对比同为HTML元素<ul><li>Tag不同的元素React会自动清掉</li><li>Tag相同的元素，更新不同的值</li></ul></li><li>对比React组件元素<ul><li>组件名不同，卸载，重新挂在新的</li><li>组件名相同，保留原实例，更新props,并触发组件的生命周期方法或者Hooks</li></ul></li></ol></li></ol><h5 id="fiber">Fiber</h5><p>现在新版的React是通过 Fiber协调引擎来进行异步协调。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>力扣第 331 场周赛</title>
    <link href="/2023/02/05/leetcode-weekly-contest-331/"/>
    <url>/2023/02/05/leetcode-weekly-contest-331/</url>
    
    <content type="html"><![CDATA[<h2 id="周赛-331"><ahref="https://leetcode.cn/contest/weekly-contest-331/">周赛 331</a></h2><h3 id="从数量最多的堆取走礼物"><ahref="https://leetcode.cn/problems/take-gifts-from-the-richest-pile/">从数量最多的堆取走礼物</a></h3><h4 id="题解">题解</h4><p>每次选择最大值进行 sqrt 就可以了，最终结果求和</p><h4 id="代码">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">pickGifts</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; gifts, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (k --) &#123;<br>            <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> pos = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; gifts.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>                <span class="hljs-keyword">if</span> (gifts[i] &gt; maxx) &#123;<br>                    maxx = gifts[i];<br>                    pos = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">-1</span>) &#123;<br>                gifts[pos] = <span class="hljs-built_in">sqrt</span>(maxx);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; gifts.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            res += gifts[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="统计范围内的元音字符串数"><ahref="https://leetcode.cn/problems/count-vowel-strings-in-ranges/">统计范围内的元音字符串数</a></h3><h4 id="题解-1">题解</h4><p>判断每个字符串，求前缀和。 每次查询求区间和</p><h4 id="代码-1">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span>+<span class="hljs-number">55</span>;<br><span class="hljs-type">int</span> ans[maxn];<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_yuan</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ch == <span class="hljs-string">&#x27;a&#x27;</span> || ch == <span class="hljs-string">&#x27;e&#x27;</span> || ch == <span class="hljs-string">&#x27;i&#x27;</span> || ch == <span class="hljs-string">&#x27;o&#x27;</span> || ch == <span class="hljs-string">&#x27;u&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vowelStrings</span><span class="hljs-params">(vector&lt;string&gt;&amp; words, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;<br>        <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ans));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; words.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_yuan</span>(words[i][<span class="hljs-number">0</span>]) &amp;&amp; <span class="hljs-built_in">is_yuan</span>(words[i][words[i].<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>])) &#123;<br>                ans[i] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i) &#123;<br>                ans[i] += ans[i<span class="hljs-number">-1</span>];<br>            &#125;<br>        &#125;<br>        <br>        vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; queries.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-type">int</span> l = queries[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> r = queries[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (l) &#123;<br>                vec.<span class="hljs-built_in">push_back</span>(ans[r] - ans[l<span class="hljs-number">-1</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                vec.<span class="hljs-built_in">push_back</span>(ans[r]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vec;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="打家劫舍-iv"><ahref="https://leetcode.cn/problems/house-robber-iv/">打家劫舍IV</a></h2><h4 id="题解-2">题解</h4><p>二分最小窃取能力每次根据二分值去判断是否满足当前的最大盗窃能力大于等于 k</p><h4 id="代码-2">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-keyword">if</span> (!flag &amp;&amp; nums[i] &lt;= num) &#123;<br>                ans ++;<br>                <span class="hljs-keyword">if</span> (ans == k) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCapability</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1000000000</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(nums, mid, k)) &#123;<br>                r = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="重排水果"><ahref="https://leetcode.cn/problems/rearranging-fruits/">重排水果</a></h2><h4 id="题解-3">题解</h4><p>先判断满不满足条件，两个数组中每个数字的总和需要是2的倍数。</p><p>两个数组找出不同的内容进行交换。 交换可以分为两种 -拿最小值交换两次，记最小值*2 - 两个数字直接交换，取最小值</p><h4 id="代码-3">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">minCost</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; basket1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; basket2)</span> </span>&#123;<br>        map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; basket1.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[basket1[i]] == <span class="hljs-number">0</span>) &#123;<br>                vec.<span class="hljs-built_in">push_back</span>(basket1[i]);<br>            &#125;<br>            mp[basket1[i]] ++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; basket2.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[basket2[i]] == <span class="hljs-number">0</span>) &#123;<br>                vec.<span class="hljs-built_in">push_back</span>(basket2[i]);<br>            &#125;<br>            mp[basket2[i]] ++;<br>        &#125;<br>        <span class="hljs-type">int</span> minn = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vec.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[vec[i]] % <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (minn == <span class="hljs-number">-1</span>) &#123;<br>                minn = vec[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                minn = <span class="hljs-built_in">min</span>(minn, vec[i]);<br>            &#125;<br>            mp[vec[i]] /= <span class="hljs-number">2</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; basket1.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            mp[basket1[i]] --;<br>        &#125;<br>        <br>        vector&lt;<span class="hljs-type">int</span>&gt; a;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vec.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            <span class="hljs-keyword">while</span> (mp[vec[i]] &lt; <span class="hljs-number">0</span>) &#123;<br>                a.<span class="hljs-built_in">push_back</span>(vec[i]);<br>                mp[vec[i]] ++;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (mp[vec[i]] &gt; <span class="hljs-number">0</span>) &#123;<br>                a.<span class="hljs-built_in">push_back</span>(vec[i]);<br>                mp[vec[i]] --;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; i ++) &#123;<br>            ans += <span class="hljs-built_in">min</span>(minn * ((a[i] != minn) + <span class="hljs-number">1</span>), a[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
